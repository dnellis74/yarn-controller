import { useRef, useState } from 'react';
import Terminal, { TerminalHandle } from './components/Terminal-Dave';

type ControlAction = 'moveUp' | 'moveDown' | 'moveLeft' | 'moveRight' | 'actionA' | 'actionB';

interface Control {
  action: ControlAction;
  label: string;
  color: string;
}

function App() {
  const terminalRef = useRef<TerminalHandle>(null);
  const [activeControl, setActiveControl] = useState<ControlAction | null>(null);

  const controls: Control[] = [
    { action: 'moveUp', label: '^', color: '#2196F3' },
    { action: 'moveDown', label: 'v', color: '#2196F3' },
    { action: 'moveLeft', label: '<', color: '#2196F3' },
    { action: 'moveRight', label: '>', color: '#2196F3' },
    { action: 'actionA', label: 'A', color: '#f44336' },
    { action: 'actionB', label: 'B', color: '#f44336' }
  ];

  const getButtonStyle = (control: Control) => ({
    padding: '4px',
    backgroundColor: 'transparent',
    color: control.color,
    border: 'none',
    borderRadius: '4px',
    cursor: 'pointer',
    fontFamily: 'monospace',
    whiteSpace: 'pre',
    lineHeight: 1,
    width: '40px',
    height: '40px',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    transition: 'all 0.2s ease',
    transform: activeControl === control.action ? 'scale(0.95)' : 'scale(1)',
    opacity: activeControl === control.action ? 0.8 : 1,
    boxShadow: activeControl === control.action ? '0 2px 4px rgba(0,0,0,0.2)' : 'none',
    ':hover': {
      transform: 'scale(1.05)',
      boxShadow: '0 4px 8px rgba(0,0,0,0.2)'
    }
  });

  const handleControl = (control: Control) => {
    setActiveControl(control.action);
    terminalRef.current?.sendControl(control.action);
    setTimeout(() => setActiveControl(null), 200);
  };

  const sidebarStyle = {
    width: '60px',
    minWidth: '60px',
    display: 'flex',
    flexDirection: 'column' as const,
    gap: '10px',
    padding: '10px',
    backgroundColor: '#1a1a1a',
    borderRight: '1px solid #333',
    overflow: 'hidden',
    justifyContent: 'flex-end',
    height: '100%'
  };

  const rightSidebarStyle = {
    ...sidebarStyle,
    borderRight: 'none',
    borderLeft: '1px solid #333'
  };

  return (
    <div className="app" style={{ 
      height: '100vh', 
      width: '100vw',
      display: 'flex',
      flexDirection: 'row',
      overflow: 'hidden'
    }}>
      {/* Left buttons */}
      <div style={sidebarStyle}>
        {controls.slice(0, 4).map((control) => (
          <button 
            key={control.action}
            onClick={() => handleControl(control)}
            style={getButtonStyle(control)}
            onMouseDown={() => setActiveControl(control.action)}
            onMouseUp={() => setActiveControl(null)}
            onMouseLeave={() => setActiveControl(null)}
          >
            {`╔═══╗
║ ${control.label} ║
╚═══╝`}
          </button>
        ))}
      </div>

      {/* Terminal area */}
      <div style={{ 
        flex: 1,
        minWidth: 0, // Prevents flex item from overflowing
        overflow: 'hidden'
      }}>
        <Terminal 
          ref={terminalRef}
          wsUrl="wss://ec2-3-92-134-219.compute-1.amazonaws.com/ws"
          tokenUrl="https://ec2-3-92-134-219.compute-1.amazonaws.com/token"
          initialRows={40}
        />
      </div>

      {/* Right buttons */}
      <div style={rightSidebarStyle}>
        {controls.slice(4).map((control) => (
          <button 
            key={control.action}
            onClick={() => handleControl(control)}
            style={getButtonStyle(control)}
            onMouseDown={() => setActiveControl(control.action)}
            onMouseUp={() => setActiveControl(null)}
            onMouseLeave={() => setActiveControl(null)}
          >
            {`╔═══╗
║ ${control.label} ║
╚═══╝`}
          </button>
        ))}
      </div>
    </div>
  );
}

export default App; 